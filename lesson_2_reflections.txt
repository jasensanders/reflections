What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository git makes a git directory to store file tracking data. but does not make any commits yet.
You ned to do this to tell git that you want to track this directory.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area allows you to set up and arrage your changes before you actually make them.  This gives you the space to really think about your code before making changes.

How can you use the staging area to make sure you have one commit per logical change?
Compare the working directory changes to the staging area using git diff (No Args).  Make sure there is one change.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches allow you to organize catagories of changes, such as changes for by a particular coder or feature.

How do the diagrams help you visualize the branch structure?
Diagrams show the branches as realted to thier children and commits and thier children.  This allows you to see the tree structure of the master in total.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The result is one branch with all changes included. It is represented in the diagram in such as way as to see the history of all the changes that happen before and where they came from.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Pros: All obvious changes are made for you, while conflits are managed manually. Cons: not always automatic.  Manual pros: conflicts are always handled. Cons: Must know the whole code base.