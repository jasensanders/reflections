When would you want to use a remote repository rather than keeping all your work local?
When working on any project with a group, or to make it possible to work on a code base from anywhere with internet access.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
What if a change was bad or introduced a bug? Then you would only want to push to the remote when you were sure you wanted to modify the remote.  It's a similar question to whether or not to commit automatically.  

Describe the differences between forks, clones, and branches. When would you use one instead of another?
A clone is a copy of the project incuding the commit history and log of all commits and branches. A Fork is a clone done on github's site. a branch is a commit that is tied to a specific person, feature, bugfix, or change that deviates from the main branch.  Branches would be used for people or features locally, while forks are used for variants of the whole project (Ex. Open Office vs Libra Office).  Cloning is a way to get the project into a directory locally this is done the first time you interact with a project.

What is the benefit of having a copy of the last known state of the remote stored locally?
You will know how to merge local and remote repositories should they diverge and you have to merge them.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
You could use email attachments, but the complexity of that could grow unmanagable quickly. You could use google drive on a shared single file or folder, but rolling back changes would not be automatic and would rely on people saving a new file for every change.  Its possible to review and verify changes manually, but the development process would slow down to a crawl.  There are other options beside git/github, but those are typically larger and heavier and potentially more costly.  

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
New features are a great reason to branch off and well as to sperated packages of updates.  The main benefit is in organization and the ablitiy to add or roll back changes in a unifom way where commits for bug fixes are not mixed with feature addtions in development making error diagnosis much easier.